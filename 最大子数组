array=[-2,-2,-3,-4,-1,-2,-1,-5,-3]


暴力法:O(n^2)
#输入一个整形数组，求数组中连续的子数组使其和最大。


#暴力法

max=-500   #max初始值
sum=0      #求和初始值
n=len(array)  #n为数组的长度
for i in range(0,n):
    temp=array[i]    
    for j in range(i+1,n):
        if temp>max:            #在求和之前的if用来避免最大子数组为单个数字的时候，输出这个数字与后面一个数字之和
            max=temp
            x=i
            y=i
        temp+=array[j]
        if temp>max:
            max=temp
            x=i
            y=j
print(x,y,max)


分治法：O（nlogn)


def maxaddsub(fro,to,a):
    if to==fro:                    #终点条件为，如果from 与 to相等，输出array[from]
        return a[fro]
    middle=(fro+to)//2             #将数组一分为三（左边，中间分界线的地方一个数，右边）
    m1=maxaddsub(fro,middle,a)     #问题简化为求左边的最大子数组
    m2=maxaddsub(middle+1,to,a)    #问题简化为求右边的最大子数组
    left=a[middle]                 #现在开始求包含中间分界数的最大子数组
    now=a[middle]                  #先求紧靠中间包含分界数左边的最大子数组 
    for i in range(middle,fro,-1):     #循环，类似暴力法，列举从中间数左边第一个的和，到中间数左边所有数的和，取最大值
        now+=a[i]
        left=max(now,left)
    right=a[middle+1]              #然后求紧靠中间分界数右边的最大子数组
    now=a[middle+1]
    for i in range(middle+1,to,1):  #循环，类似暴力法，列举从不包含中间数的右边第一个的和，到中间数右边所有数的和，取最大值 
        now+=a[i]
        right=max(now,right)     
    m3=left+right                      
    return max(m1,m2,m3)


b=maxaddsub(0,len(array)-1,array)
print(b)



贪心算法：O(n)
sum=0
ans=-100
for i in range(0,n):
    sum=sum+array[i]
    if sum>=ans:
        ans=sum
    if sum<=0:
        sum=0
print(ans)
