#一幢 100 层的大楼，给你两枚鸡蛋。假设，在第 n 层扔下鸡蛋，问最少多少次能测出鸡蛋扔下去不碎的楼层

#转换一下问题思考

#1、最坏打算 
#条件：最多允许扔X次，
#即从第X层开始扔，最坏情况是，蛋在X层碎了且临界层在X-1层，第二颗蛋扔X-1次至X-1层。共X次
#2、最好打算
#条件：最多允许扔X次
#即从X层开始扔，蛋没碎。用掉一次机会还剩下X-1次机会。
#于是从X+（X-1）层开始扔，如蛋还是没碎，则从X+（X-1）+（X-2）层开始扔
#在最好情况下，蛋一直没碎，最后一次就从X+（X-1）+（X-2）.....+1=(X^2+X)/2层
#已知有100层，则(X^2+X)/2>=100，X=14


#动态回归法
import functools
@functools.lru_cache(maxsize=None)
def f(n, m):
    if n == 0:
        return 0
    if m == 1:
        return n

    ans = min([max([f(i - 1, m - 1), f(n - i, m)]) for i in range(1, n + 1)]) + 1
    print(ans)
    return ans


print(f(100, 2))
