array=[-2,-2,-3,-4,-1,-2,-1,-5,-3]


暴力法:O(n^2)
#输入一个整形数组，求数组中连续的子数组使其和最大。


#暴力法

max=-500   #max初始值
sum=0      #求和初始值
n=len(array)  #n为数组的长度
for i in range(0,n):
    temp=array[i]    
    for j in range(i+1,n):
        if temp>max:            #在求和之前的if用来避免最大子数组为单个数字的时候，输出这个数字与后面一个数字之和
            max=temp
            x=i
            y=i
        temp+=array[j]
        if temp>max:
            max=temp
            x=i
            y=j
print(x,y,max)


分治法：O（nlogn)

def solution(fro, to, arr):
    if fro == to:
        return arr[fro]
    middle = (fro+to)//2
    left = solution(fro, middle, arr)
    right = solution(middle+1, to, arr)
    left_max = -12535
    now = 0
    for i in range(middle,fro-1,-1):
        now+=arr[i]
        left_max = max(now,left_max)
    

    right_max = -12535
    now = 0
    for j in range(middle+1,to,1):
        now+=arr[j]
        right_max = max(now,right_max)
        
    mid = left_max+right_max

    print(f'''{left},{right},{mid}''')

    return max(left,right,mid)
          
print(solution(0,len(array)-1,array))



贪心算法：O(n)
sum=0
ans=-100
for i in range(0,n):
    sum=sum+array[i]
    if sum>=ans:
        ans=sum
    if sum<=0:
        sum=0
print(ans)
