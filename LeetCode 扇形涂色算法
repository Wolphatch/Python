将圆形均匀分割成m个扇形,用n种不同颜色进行染色,共有多少种不同的染色方法?
算法原理：Am=n*(n-1)^(m-1)-A(m-1)
思路：扇形1有n种涂色法，（下一个扇区只与上一个扇区颜色不同）扇形二择优n-1种方法，扇形3要和扇形2不同但可以和扇形1相同，所以也是n-1种方法。
故直到扇形n，方法数为n*(n-1)^(m-1).

这时会发现一个问题（奇数）：
既然扇形1、3、5...等可以颜色相同，那么如果一共有5个扇形的话的话，扇形5与相邻的扇形1就会颜色一样，不符合条件要减去。
如果扇形5与相邻的扇形1就会颜色一样，问题就简化为将圆形均匀分割成4个扇形,用n种不同颜色进行染色,共有多少种不同的染色方法?即A（m-1）

第二个问题（偶数）：
递推公式在：下一个扇区只与上一个扇区颜色不同这个假设下，最后一个扇区只需要与倒数第二个扇区不同色，方法也是n-1种。
但也存在最后一个扇区的颜色与第一个扇区相同：即扇区n-1的颜色与扇区1不同，此时，扇区n既不能与扇区n-1相同，也不能与扇区1相同。此时扇区n的着色方法其实为n-2。
但是我们使用的是n-1，在此条件下扇区n会与扇区n-1或者扇区1颜色相同，则此时与奇数的处理方法一样，合并扇区并成为一个奇数问题。

So，这就证明递推公式在奇数和偶数都适用

Python代码：

def cutcircle(m,n):
    if m==1:
        return n
    if m==2:
        return n*(n-1)
    if m>=3 :
        print('There are %s, with color %s'%(m,n))
        return n*((n-1)**(m-1))-cutcircle(m-1,n)


print(cutcircle(5,4))
